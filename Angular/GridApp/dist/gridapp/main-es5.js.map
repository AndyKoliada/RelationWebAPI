{"version":3,"sources":["webpack:///src/app/relation.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/relation.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["RelationService","http","url","get","relation","myHeaders","set","post","JSON","stringify","headers","put","id","AppComponent","serv","relations","Array","loadRelations","getRelations","subscribe","data","editedRelation","push","isNewRecord","Id","FullName","TelephoneNumber","EMailAddress","DefaultCity","DefaultCountry","DefaultPostalCode","DefaultStreet","StreetNumber","editTemplate","readOnlyTemplate","createRelation","statusMessage","updateRelation","pop","deleteRelation","addRelation","selector","templateUrl","providers","AppModule","imports","declarations","bootstrap","Relation","Name","platform","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {Relation} from './relation';\r\n    \r\n@Injectable()\r\nexport class RelationService{\r\n    \r\n    private url = \"https://localhost:44358/api/relations\";\r\n    constructor(private http: HttpClient){ }\r\n       \r\n    getRelations(){\r\n        return this.http.get(this.url);\r\n    }\r\n   \r\n    createRelation(relation: Relation){\r\n        const myHeaders = new HttpHeaders().set(\"Content-Type\", \"application/json\");\r\n        return this.http.post(this.url, JSON.stringify(relation), {headers: myHeaders}); \r\n    }\r\n    updateRelation(relation: Relation) {\r\n        const myHeaders = new HttpHeaders().set(\"Content-Type\", \"application/json\");\r\n        return this.http.put(this.url, JSON.stringify(relation), {headers:myHeaders});\r\n    }\r\n    deleteRelation(id: string){\r\n        return this.http.delete(this.url + '/' + id);\r\n    }\r\n}","import {TemplateRef, ViewChild} from '@angular/core';\r\nimport {Component, OnInit} from '@angular/core';\r\nimport {Relation} from './relation';\r\nimport {RelationService} from './relation.service';\r\nimport {Observable} from 'rxjs';\r\n   \r\n@Component({ \r\n    selector: 'my-app', \r\n    templateUrl: './app.component.html',\r\n    providers: [RelationService]\r\n}) \r\nexport class AppComponent implements OnInit {\r\n\r\n    @ViewChild('readOnlyTemplate', {static: false}) readOnlyTemplate: TemplateRef<any>;\r\n    @ViewChild('editTemplate', {static: false}) editTemplate: TemplateRef<any>;\r\n       \r\n    editedRelation: Relation;\r\n    relations: Array<Relation>;\r\n    isNewRecord: boolean;\r\n    statusMessage: string;\r\n       \r\n    constructor(private serv: RelationService) {\r\n        this.relations = new Array<Relation>();\r\n    }\r\n       \r\n    ngOnInit() {\r\n        this.loadRelations();\r\n    }\r\n       \r\n    private loadRelations() {\r\n        this.serv.getRelations().subscribe((data: Relation[]) => {\r\n                this.relations = data; \r\n            });\r\n    }\r\n\r\n    addRelation() {\r\n        this.editedRelation = new Relation();\r\n        this.relations.push(this.editedRelation);\r\n        this.isNewRecord = true;\r\n    }\r\n    \r\n    editRelation(relation: Relation) {\r\n        this.editedRelation = new Relation(relation.Id, relation.FullName, relation.TelephoneNumber, relation.EMailAddress, relation.DefaultCity,\r\n            relation.DefaultCountry, relation.DefaultPostalCode, relation.DefaultStreet, relation.StreetNumber);\r\n    }\r\n\r\n    loadTemplate(relation: Relation) {\r\n        if (this.editedRelation && this.editedRelation.Id === relation.Id) {\r\n            return this.editTemplate;\r\n        } else {\r\n            return this.readOnlyTemplate;\r\n        }\r\n    }\r\n\r\n    saveRelation() {\r\n        if (this.isNewRecord) {\r\n\r\n            this.serv.createRelation(this.editedRelation).subscribe(data => {\r\n                this.statusMessage = 'Added successfully',\r\n                this.loadRelations();\r\n            });\r\n            this.isNewRecord = false;\r\n            this.editedRelation = null;\r\n        } else {\r\n\r\n            this.serv.updateRelation(this.editedRelation).subscribe(data => {\r\n                this.statusMessage = 'Updated succesfully',\r\n                this.loadRelations();\r\n            });\r\n            this.editedRelation = null;\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n\r\n        if (this.isNewRecord) {\r\n            this.relations.pop();\r\n            this.isNewRecord = false;\r\n        }\r\n        this.editedRelation = null;\r\n    }\r\n\r\n    deleteRelation(relation: Relation) {\r\n        this.serv.deleteRelation(relation.Id).subscribe(data => {\r\n            this.statusMessage = 'Deleted succesfully',\r\n            this.loadRelations();\r\n        });\r\n    }\r\n}","<h1>Relaitons list</h1>\r\n<input type=\"button\" value=\"Add new\" class=\"btn btn-default\" (click)=\"addRelation()\" />\r\n<table class=\"table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <td>Name</td>\r\n            <td>FullName</td>\r\n            <td>TelephoneNumber</td>\r\n            <td>EmailAddress</td>\r\n            <td>Country</td>\r\n            <td>City</td>\r\n            <td>Street</td>\r\n            <td>PostalCode</td>\r\n            <td>StreetNumber</td>\r\n            <td></td>\r\n            <td></td>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let relation of relations\">\r\n            <ng-template [ngTemplateOutlet]=\"loadTemplate(relation)\" \r\n                        [ngTemplateOutletContext]=\"{ $implicit: relation}\">\r\n            </ng-template>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<div>{{statusMessage}}</div>\r\n    \r\n    \r\n<ng-template #readOnlyTemplate let-relation>\r\n    <td>{{relation.Name}}</td>\r\n    <td>{{relation.FullName}}</td>\r\n    <td>{{relation.TelephoneNumber}}</td>\r\n    <td>{{relation.EmailAddress}}</td>\r\n    <td>{{relation.DefaultCountry}}</td>\r\n    <td>{{relation.DefaultCity}}</td>\r\n    <td>{{relation.DefaultStreet}}</td>\r\n    <td>{{relation.DefaultPostalCode}}</td>\r\n    <td>{{relation.StreetNumber}}</td>\r\n    <td>\r\n        <input type=\"button\" value=\"Edit\" class=\"btn btn-default\" (click)=\"editRelation(relation)\" />\r\n    </td>\r\n    <td>\r\n        <input type=\"button\" value=\"Delete\" (click)=\"deleteRelation(relation)\" class=\"btn btn-danger\" />\r\n    </td>\r\n</ng-template>\r\n   \r\n\r\n<ng-template #editTemplate>\r\n    <td>\r\n        <input type=\"text\" [(ngModel)]=\"editedRelation.Name\" class=\"form-control\" />\r\n    </td>\r\n    <td>\r\n        <input type=\"text\" [(ngModel)]=\"editedRelation.FullName\" class=\"form-control\" />\r\n    </td>\r\n    <td>\r\n        <input type=\"text\" [(ngModel)]=\"editedRelation.TelephoneNumber\" class=\"form-control\" />\r\n    </td>\r\n    <td>\r\n        <input type=\"text\" [(ngModel)]=\"editedRelation.EmailAddress\" class=\"form-control\" />\r\n    </td>\r\n    <td>\r\n        <input type=\"text\" [(ngModel)]=\"editedRelation.DefaultCountry\" class=\"form-control\" />\r\n    </td>\r\n    <td>\r\n        <input type=\"text\" [(ngModel)]=\"editedRelation.DefaultStreet\" class=\"form-control\" />\r\n    </td>\r\n    <td>\r\n        <input type=\"text\" [(ngModel)]=\"editedRelation.DefaultPostalCode\" class=\"form-control\" />\r\n    </td>\r\n    <td>\r\n        <input type=\"text\" [(ngModel)]=\"editedRelation.StreetNumber\" class=\"form-control\" />\r\n    </td>\r\n    <td>\r\n        <input type=\"button\" value=\"Save\" (click)=\"saveRelation()\" class=\"btn btn-success\" />\r\n    </td>\r\n    <td>\r\n        <input type=\"button\" value=\"Cancel\" (click)=\"cancel()\" class=\"btn btn-warning\" />\r\n    </td>\r\n</ng-template>","import { NgModule }      from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule }   from '@angular/forms';\r\nimport { HttpClientModule }   from '@angular/common/http';\r\nimport { AppComponent }   from './app.component';\r\n@NgModule({\r\n    imports:      [ BrowserModule, FormsModule, HttpClientModule],\r\n    declarations: [ AppComponent ],\r\n    bootstrap:    [ AppComponent ]\r\n})\r\nexport class AppModule { }","export class Relation{\r\n    constructor(\r\n        public Id: string = null,\r\n        public Name: string = \"\",\r\n        public FullName: string = \"\",\r\n        public TelephoneNumber: string = \"\",\r\n        public EMailAddress: string = \"\",\r\n        public DefaultCountry: string = \"\",\r\n        public DefaultCity: string = \"\",\r\n        public DefaultStreet: string = \"\",\r\n        public DefaultPostalCode: string = \"\",\r\n        public StreetNumber: string = \"\") { }\r\n}","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { AppModule } from './app/app.module';\r\nconst platform = platformBrowserDynamic();\r\nplatform.bootstrapModule(AppModule);","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}